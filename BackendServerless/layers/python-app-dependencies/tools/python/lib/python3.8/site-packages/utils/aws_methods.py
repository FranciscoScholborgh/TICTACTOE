import json
import boto3
import logging
from botocore.exceptions import ClientError

def get_response(statusCode: int, message: object):
    return {
        "statusCode": statusCode,
        "body": json.dumps(message)
    }

#:param function_arn: str with the arn indentifier of the lambda function to be excecute
#:param data: any serializable object by json module. A dict is expected
#:return: returns the result of the lambda function invoke (a dict with the status or a excetption)
def invoke_lambdaFunction(function_arn: str, data: dir):
    client = boto3.client('lambda')
    return client.invoke(
        FunctionName = function_arn,
        InvocationType = 'RequestResponse',
        Payload = json.dumps(data)
    )

#:param users: list or Cursor object of players and spectators
#:param message: any serializable object by json module. A dict is expected
#:return: returns None but and send the messege object to users.
def send_update_wsapi(apiUrl:str, users:list, message:object):
    client = boto3.client("apigatewaymanagementapi", endpoint_url=apiUrl)
    for user in users:
        try:
            id= user.get("_id") 
            client.post_to_connection(ConnectionId=id, Data=json.dumps(message))
        except:
            pass

#:param sqs_queue_url: String URL of existing SQS queue
#:param msg_body: String message body
#:return: Dictionary containing information about the sent message. If error, returns None.  
def sendtoQueue(queue_url:str, message:str):
    sqs_client = boto3.client('sqs')
    try:
        msg = sqs_client.send_message(QueueUrl=queue_url, MessageBody=json.dumps(message))
    except ClientError as e:
        logging.error(e)
        return None
    return msg
