import pymongo

class TicTacToeDB():

    def __init__(self, urlClient:str, db_name:str):
        client = pymongo.MongoClient(urlClient)
        db = client.get_database(db_name)
        self.game_records = db.game_status
        self.users = db.users
        self.chat = db.chat

    def get_gameRecords(self):
        return self.game_records

    def get_userRecords(self):
        return self.users

    def get_chatRecords(self):
        return self.chat
        
    def get_gameStatus(self):
        return self.game_records.find()[0]

    def add_user(self, userID:str, username:str):
        new_user = {'_id': userID, 'username': username}
        return self.users.insert_one(new_user)

    def get_user(self, userID:str):
        return self.users.find_one({'_id': userID})

    def get_allUsers(self):
        return self.users.find()

    def remove_user(self, userID:str):
        return self.users.delete_one({'_id': userID})

    def register_player(self, userID:str, username:str):
        self.add_user(userID, username)
        game_status = self.get_gameStatus()
        game_id = game_status.get('_id')
        if game_status.get('status') is None:
            ready_toplay = False
            if game_status.get('player1') is None:
                status_update = {'player1': {'_id':userID, 'username':username}}  
            elif game_status.get('player2') is None:
                status_update = {'player2': {'_id':userID, 'username':username}, 'status': 'ongame', 'turn': 'O'}
                ready_toplay = True
            self.game_records.update_one({'_id': game_id}, {'$set': status_update})
            update = self.game_records.find_one({'_id': game_id})
            return {"access":"Player", "ready_toplay":ready_toplay, "game_status":update}
        else:
            return {"access":"Spectator", "game_status":game_status}

    def user_isPlayer(self, userID:str):
        game_status = self.get_gameStatus()
        if userID == game_status.get('player1').get("_id") or userID == game_status.get('player2').get("_id"):
            return True
        return False
  
    def retire_player(self, userID:str):
        game_status = self.get_gameStatus()
        key_toupdate = ''
        for key in game_status.keys():
            if game_status.get(key) == userID:
                status_update = {key: None}
                game_id = game_status.get('_id')
                self.game_records.update_one({'_id': game_id}, {'$set': status_update})
                return True
        return False

    def reset_game(self):
        game_status = self.get_gameStatus()
        status_update = {
            'player1' : None,
            'player2' : None,
            'turn' : None,
            'status' : None,
            'board_row1' : ['','',''],
            'board_row2' : ['','',''],
            'board_row3' : ['','','']
        }
        game_id = game_status.get('_id')
        self.game_records.update_one({'_id': game_id}, {'$set': status_update})
        