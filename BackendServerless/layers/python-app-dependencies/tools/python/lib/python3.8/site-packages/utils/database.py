import pymongo

class TicTacToeDB():

    def __init__(self):
        client = pymongo.MongoClient(f"mongodb+srv://tictactoedb:fa6PQ1Xy8CCRoUou@cluster0.hb7sg.mongodb.net/myFirstDatabase?retryWrites=true&w=majority")
        db = client.get_database('tictactoe_db')
        self.game_records = db.game_status
        self.users = db.users
        self.chat = db.chat

    def get_gameRecords(self):
        return self.game_records

    def get_userRecords(self):
        return self.users

    def get_chatRecords(self):
        return self.chat

    def add_user(self, key:str, username:str):
        new_user = {'_id': key, 'username': username}
        self.users.insert_one(new_user)

    def remove_user(self, key:str):
        self.users.delete_one({'_id': key})

    def register_player(self, key:str, username:str):
        self.add_user(key, username)
        game_status = self.game_records.find()[0]
        game_id = game_status.get('_id')
        if game_status.get('status') is None:
            if game_status.get('player1') is None:
                status_update = {'player1': key}  
            elif game_status.get('player2') is None:
                status_update = {'player2': key, 'status': 'ongame', 'turn': 'O'}
            self.game_records.update_one({'_id': game_id}, {'$set': status_update})
            update = self.game_records.find_one({'_id': game_id})
            return {"access":"Player", "game_status":update}
        else:
            return {"access":"Spectator", "game_status":game_status}

    def user_isPlayer(self, userID:str):
        game_status = self.game_records.find()[0]
        player1 = game_status.get('player1')
        player2 = game_status.get('player2')
        if userID == player1 or userID == player2:
            return True
        return False
                    